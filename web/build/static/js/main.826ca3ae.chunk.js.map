{"version":3,"sources":["Blastlist.js","Blastform.js","App.js","serviceWorker.js","index.js"],"names":["BlastListBody","props","rows","blastData","map","row","index","key","id","results","sub","BlastList","this","Component","BlastForm","state","value","handleChange","bind","handleSubmit","event","setState","target","length","canBeSubmitted","alert","headers","Headers","append","options","method","body","JSON","stringify","request","Request","fetch","response","status","console","log","preventDefault","isEnabled","onSubmit","cols","placeholder","type","onChange","disabled","App","blast","res","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAEMA,G,MAAgB,SAAAC,GAClB,IAAMC,EAAOD,EAAME,UAAUC,IAAI,SAACC,EAAKC,GACnC,OACI,wBAAIC,IAAKD,GAAT,eACaD,EAAIG,GADjB,IAECH,EAAII,QAAQL,IAAI,SAACM,EAAKJ,GAAN,OACf,wBAAIC,IAAKD,GAAQI,QAM3B,OAAO,6BAAMR,KAeFS,E,iLAXD,IACER,EAAcS,KAAKX,MAAnBE,UAER,OACI,6BACI,kBAAC,EAAD,CAAeA,UAAWA,S,GANlBU,a,OCmDTC,E,YAjEb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDc,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,0EAQNE,GACXR,KAAKS,SAAS,CAACL,MAAOI,EAAME,OAAON,U,uCAKnC,OADkBJ,KAAKG,MAAfC,MACKO,OAAS,K,2EAGLH,G,qFACZR,KAAKY,iBACVC,MAAM,gCAAkCb,KAAKG,MAAMC,QAC7CU,EAAU,IAAIC,SACZC,OAAO,eAAgB,oBAEzBC,EAAU,CACdC,OAAQ,OACRJ,UACAK,KAAMC,KAAKC,UAAUrB,KAAKG,MAAMC,QAI5BkB,EAAU,IAAIC,QAAQ,gDAAiDN,G,SACtDO,MAAMF,G,OAAvBG,E,OAGS,OAFTC,EAASD,EAASC,SAGtBC,QAAQC,IAAI,uBAEC,MAAXF,GACFC,QAAQC,IAAI,0DAEdpB,EAAMqB,iB,qIAIN,IAAMC,EAAY9B,KAAKY,iBACvB,OACE,0BAAMmB,SAAU/B,KAAKO,cACnB,gDAGE,8BACAjB,KAAK,IACL0C,KAAK,KACLpC,GAAG,YACHqC,YAAY,gJACZC,KAAK,OACL9B,MAAOJ,KAAKG,MAAMC,MAClB+B,SAAUnC,KAAKK,eAEjB,2BAAO+B,UAAWN,EAAWI,KAAK,SAAS9B,MAAM,gB,GA5DjCH,aCiCToC,E,2MA5BblC,MAAQ,CACNmC,MAAQ,I,mNAKYd,MAAM,+C,cAAlBe,E,gBACcA,EAAIC,O,OAAlBF,E,OACNtC,KAAKS,SAAS,CACZ6B,U,mIAII,IACHA,EAAStC,KAAKG,MAAdmC,MACL,OACE,6BACA,6BACA,kBAAC,EAAD,OAEA,kBAAC,EAAD,CACA/C,UAAa+C,S,GAtBDrC,aCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.826ca3ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst BlastListBody = props => { \n    const rows = props.blastData.map((row, index) => {\n        return (\n            <ul key={index}>\n            Blast query {row.id}:\n            {row.results.map((sub, index) => (\n              <li key={index}>{sub}</li>\n              ))}\n            </ul>\n        );\n    });\n\n    return <div>{rows}</div>;\n}\n\nclass BlastList extends Component {\n    render() {\n        const { blastData } = this.props;\n\n        return (\n            <div>\n                <BlastListBody blastData={blastData} />\n            </div>\n        );\n    }\n}\n\nexport default BlastList;","import React, { Component } from 'react';\n\nclass BlastForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  canBeSubmitted() {\n    const { value } = this.state;\n    return value.length > 30;\n  }\n\n  async handleSubmit(event) {\n    if (!this.canBeSubmitted()) {}\n    alert('A DNA sequene was submitted: ' + this.state.value);\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(this.state.value)\n    };\n\n    // const request = new Request('http://localhost:8000/api/blast_request/', options);\n    const request = new Request('http://104.248.138.52:8000/api/blast_request/', options);\n    const response = await fetch(request);\n    const status = response.status;\n\n    if (status === 200){\n      console.log(\"Sequence processed.\")\n    }\n    if (status === 400){\n      console.log(\"Please provide a valid DNA sequence consisting of ATGC\")\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    const isEnabled = this.canBeSubmitted();\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Dna sequence:\n        </label>\n          <textarea\n          rows=\"4\"\n          cols=\"40\"\n          id=\"dna_input\"\n          placeholder=\"Enter a DNA sequence consisting of ATGC of at least length 30. It is advisable to at least use partial coding sequences to avoid stop codons.\"\n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          />\n        <input disabled={!isEnabled} type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default BlastForm;","import React, {Component} from 'react';\nimport './App.css';\nimport BlastList from './Blastlist';\nimport BlastForm from './Blastform'\n\n\nclass App extends Component {\n  state = {\n    blast : []\n  };\n\n  async componentDidMount(){\n      // const res = await fetch('http://localhost:8000/api/?format=json');\n      const res = await fetch('http://104.248.138.52:8000/api/?format=json');\n      const blast = await res.json();\n      this.setState({\n        blast\n      });\n  }\n\n  render() {\n    let {blast} = this.state;\n    return (\n      <div>\n      <div>\n      <BlastForm />\n      </div>\n      <BlastList \n      blastData = {blast}\n      />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}